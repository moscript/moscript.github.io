'use strict';

var app = angular.module("angular-quiz", ['ngMaterial', '720kb.socialshare']).config(['$compileProvider', function ($compileProvider) {
	$compileProvider.debugInfoEnabled(false);
	var oldWarn = console.warn;
	console.warn = function (arg1) {
		if (arg1.startsWith('ARIA:')) return;
		if (arg1.startsWith('Markup')) return;
		oldWarn.apply(console, arguments);
	};
	console.warn('Warnings disabled.');
}]);
'use strict';

(function () {
	'use strict';

	angular.module('aweosome-app', ['angular-quiz']).config(['$compileProvider', function ($compileProvider) {
		$compileProvider.debugInfoEnabled(false);
		var oldWarn = console.warn;
		console.warn = function (arg1) {
			if (arg1.startsWith('ARIA:')) return;
			if (arg1.startsWith('Markup')) return;
			oldWarn.apply(console, arguments);
		};
		console.warn('Warnings disabled.');
	}]).controller('StartController', StartController);

	StartController.$inject = ["$http", "$compile", "$scope"];

	/* @ngInject */
	function StartController($http, $compile, $scope) {
		var self = this;

		$http.get("/js/data.json").then(successCallback, errPromise);

		function successCallback(responce) {
			self.quiz = responce.data;
		}

		function errPromise(err) {
			console.log(err);
		}
	}
})();
'use strict';

(function () {
	'use strict';

	angular.module('angular-quiz').directive('angularQuiz', QuizEngine);

	QuizEngine.$inject = ['$interval', '$timeout'];

	/* @ngInject */
	function QuizEngine() {
		var directive = {
			bindToController: true,
			controller: QuizEngineController,
			controllerAs: 'quizEngineCtrl',
			link: link,
			restrict: 'AE',
			templateUrl: "/views/quiz.html",
			scope: {
				quizData: "="
			}
		};
		return directive;

		function link(scope, element, attrs) {}
	}

	/* @ngInject */
	function QuizEngineController($interval, $timeout) {
		var self = this;
		self.showQuizHandler = showQuizHandler;
		self.showTypeNameView = self.quizData.typeName;
		self.maxCountOfQuestions = 15;
		self.answersList = [];
		self.notSelected = true;
		self.customerAnswers = null;
		self.choise = undefined;
		self.isFullCustomerAnswersArr = false;
		self.showResults = false;
		self.results = {};
		self.quizTimer = null;
		self.currentQuestionNumber = 0;
		self.stopTime = undefined;

		self.makeChoiceHandler = makeChoiceHandler;
		self.skipQuestionHandler = skipQuestionHandler;
		self.answerHandler = answerHandler;
		self.replayTestHandler = replayTestHandler;
		self.finishTestHandler = finishTestHandler;

		self.openQuizItem = openQuizItem;

		if (!self.showTypeNameView) {
			self.showQuizHandler();
			//startTimer();
		}
		initQuiz();

		// Business logic
		function initQuiz() {
			var tmpLength = self.quizData.quiz.length;

			if (tmpLength > self.maxCountOfQuestions) {
				self.quizData.quiz.length = self.maxCountOfQuestions;
			}

			self.customerAnswers = new Array(self.quizData.quiz.length);

			for (var _i = 0; _i < self.customerAnswers.length; _i++) {
				self.customerAnswers[_i] = undefined;
			}

			console.log(self.customerAnswers);

			for (var i = 0; i < self.quizData.quiz.length; i++) {
				self.answersList.push({
					name: "" + (i + 1) + ". " + self.quizData.quiz[i]["options"][self.quizData.quiz[i]["answer"]],
					rightAnswer: parseInt(self.quizData.quiz[i].answer)
				});
			}

			console.debug(self.answersList);

			self.currentQuizItem = self.quizData.quiz[0];
		}

		function showQuizHandler() {
			document.getElementById('test-container').style.visibility = 'visible';
			self.showTypeNameView = false;
			self.startTestMode = true;
			startTimer();
		}

		function makeChoiceHandler(index) {
			self.notSelected = false;
			self.choise = index;
		};

		function answerHandler() {
			if (!self.notSelected) {
				nextQuestion();
			}
		};

		function skipQuestionHandler() {
			nextQuestion();
		}

		function replayTestHandler() {
			self.startTestMode = false;
			self.showResults = false;
			self.isFullCustomerAnswersArr = false;
			self.customerAnswers = null;
			self.userName = "";
			self.answersList.length = 0;
			if (self.quizData.hasOwnProperty("timer")) {
				$interval.cancel(self.stopTime);
			}
			if (!self.quizData.typeName) {
				self.startTestMode = true;
				self.showQuizHandler();
				initQuiz();
			} else {
				self.showTypeNameView = true;
				self.startTestMode = false;
				console.debug(self.startTestMode);
				console.debug(self.showTypeNameView);
				initQuiz();
			}
			self.choise = undefined;
			self.currentQuizItem = self.quizData.quiz[0];
			self.currentQuestionNumber = 0;
		}

		function finishTestHandler() {
			var i;
			self.results = {
				correct: 0,
				mistake: 0,
				unanswered: 0
			};

			if (self.quizData.hasOwnProperty("timer")) {
				$interval.cancel(self.stopTime);
			}

			for (i = 0; i < self.customerAnswers.length; i++) {
				if (self.customerAnswers[i] === parseInt(self.quizData.quiz[i].answer)) {
					self.results.correct++;
				} else if (self.customerAnswers[i] !== parseInt(self.quizData.quiz[i].answer) && self.customerAnswers[i] !== undefined) {
					self.results.mistake++;
				} else if (self.customerAnswers[i] === undefined) {
					self.results.unanswered++;
				}
			}

			self.results.correct = self.results.correct * 100 / self.quizData.quiz.length;
			self.results.mistake = self.results.mistake * 100 / self.quizData.quiz.length;
			self.results.unanswered = self.results.unanswered * 100 / self.quizData.quiz.length;

			if (self.userName === "" || self.userName === undefined) {
				self.userName = "No name";
			}
			document.getElementById('results-view').style.visibility = 'visible';
			self.startTestMode = false;
			self.showResults = true;
		}

		function checkFullAnswersArray() {

			self.isFullCustomerAnswersArr = self.customerAnswers.every(function (element, index, array) {
				return element !== undefined;
			});

			console.log(self.customerAnswers);

			if (self.isFullCustomerAnswersArr) {
				finishTestHandler();
			}
		};

		function nextQuestion() {
			var i,
			    index = self.currentQuestionNumber + 1;
			if (index === self.quizData.quiz.length) {
				index = 0;
			}
			for (i = index; i < self.quizData.quiz.length; i++) {
				if (self.customerAnswers[i] == undefined) {
					index = i;
					break;
				}
			}

			if (i == self.quizData.quiz.length) {
				for (i = 0; i < index; i++) {
					if (self.customerAnswers[i] == undefined) {
						index = i;
						break;
					}
				}
			}
			openQuizItem(index);
		}

		function openQuizItem(index) {
			if (!self.isFullCustomerAnswersArr) {
				self.customerAnswers[self.currentQuestionNumber] = self.choise;
				self.choise = undefined;
				self.notSelected = true;
				self.currentQuizItem = self.quizData.quiz[index];
				$timeout(function () {}, 5000);
				if (self.customerAnswers[index] !== undefined) {
					console.debug("Has answer");
					self.notSelected = false;
					self.choise = self.customerAnswers[index];
				}
			}
			self.currentQuestionNumber = index;

			checkFullAnswersArray();
		};

		function startTimer() {
			self.quizTimer = {};
			if (self.quizData.hasOwnProperty("timer")) {
				if (self.quizData.timer.minutes < 10) {
					self.quizTimer.minutes = "0" + self.quizData.timer.minutes.toString();
				} else {
					self.quizTimer.minutes = self.quizData.timer.minutes.toString();
				}
				if (self.quizData.timer.seconds < 10) {
					self.quizTimer.seconds = "0" + self.quizData.timer.seconds.toString();
				} else {
					self.quizTimer.seconds = self.quizData.timer.seconds.toString();
				}
				initTimer();
			}
		}

		function initTimer() {
			self.stopTime = $interval(function () {
				self.quizTimer.seconds = parseInt(self.quizTimer.seconds);
				self.quizTimer.minutes = parseInt(self.quizTimer.minutes);
				if (self.quizTimer.seconds == 0) {
					if (self.quizTimer.minutes == 0) {
						finishTestHandler();
					} else {
						self.quizTimer.minutes--;
						if (self.quizTimer.minutes < 10) {
							self.quizTimer.minutes = "0" + self.quizTimer.minutes.toString();
						}
						self.quizTimer.seconds = 59;
					}
				} else {
					self.quizTimer.seconds--;
					if (self.quizTimer.seconds < 10) {
						self.quizTimer.seconds = "0" + self.quizTimer.seconds.toString();
					}
				}
				//console.debug(self.quizTimer);
			}, 1000);
		}
	}
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpzL2FwcC5qcyIsImpzL2NvbnRyb2xsZXJzL3N0YXJ0Q3RsLmpzIiwianMvZGlyZWN0aXZlcy9xdWl6LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSSxNQUFNLFFBQVEsTUFBUixDQUFlLGNBQWYsRUFBK0IsQ0FBQyxZQUFELEVBQWUsbUJBQWYsQ0FBL0IsRUFDUixNQURRLENBQ0QsQ0FBQyxrQkFBRCxFQUFxQixVQUFVLGdCQUFWLEVBQTRCO0FBQ3ZELGtCQUFpQixnQkFBakIsQ0FBa0MsS0FBbEM7QUFDQSxLQUFJLFVBQVUsUUFBUSxJQUF0QjtBQUNBLFNBQVEsSUFBUixHQUFlLFVBQVMsSUFBVCxFQUFlO0FBQzdCLE1BQUksS0FBSyxVQUFMLENBQWdCLE9BQWhCLENBQUosRUFBOEI7QUFDOUIsTUFBSSxLQUFLLFVBQUwsQ0FBZ0IsUUFBaEIsQ0FBSixFQUErQjtBQUMvQixVQUFRLEtBQVIsQ0FBYyxPQUFkLEVBQXVCLFNBQXZCO0FBQ0EsRUFKRDtBQUtBLFNBQVEsSUFBUixDQUFhLG9CQUFiO0FBQ0EsQ0FUTSxDQURDLENBQVY7OztBQ0FBLENBQUMsWUFBVztBQUNYOztBQUVBLFNBQ0UsTUFERixDQUNTLGNBRFQsRUFDd0IsQ0FBQyxjQUFELENBRHhCLEVBRUUsTUFGRixDQUVTLENBQUMsa0JBQUQsRUFBcUIsVUFBVSxnQkFBVixFQUE0QjtBQUN4RCxtQkFBaUIsZ0JBQWpCLENBQWtDLEtBQWxDO0FBQ0EsTUFBSSxVQUFVLFFBQVEsSUFBdEI7QUFDQSxVQUFRLElBQVIsR0FBZSxVQUFTLElBQVQsRUFBZTtBQUM3QixPQUFJLEtBQUssVUFBTCxDQUFnQixPQUFoQixDQUFKLEVBQThCO0FBQzlCLE9BQUksS0FBSyxVQUFMLENBQWdCLFFBQWhCLENBQUosRUFBK0I7QUFDL0IsV0FBUSxLQUFSLENBQWMsT0FBZCxFQUF1QixTQUF2QjtBQUNBLEdBSkQ7QUFLQSxVQUFRLElBQVIsQ0FBYSxvQkFBYjtBQUNBLEVBVE8sQ0FGVCxFQVlF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RCxXQUFTLFNBQVQsR0FBcUI7QUFDcEIsUUFBSyxRQUFMLEdBQWdCLFVBQVUsWUFBVztBQUNwQyxTQUFLLFNBQUwsQ0FBZSxPQUFmLEdBQXlCLFNBQVMsS0FBSyxTQUFMLENBQWUsT0FBeEIsQ0FBekI7QUFDQSxTQUFLLFNBQUwsQ0FBZSxPQUFmLEdBQXlCLFNBQVMsS0FBSyxTQUFMLENBQWUsT0FBeEIsQ0FBekI7QUFDQSxRQUFHLEtBQUssU0FBTCxDQUFlLE9BQWYsSUFBd0IsQ0FBM0IsRUFBOEI7QUFDN0IsU0FBRyxLQUFLLFNBQUwsQ0FBZSxPQUFmLElBQXdCLENBQTNCLEVBQThCO0FBQzdCO0FBQ0EsTUFGRCxNQUVPO0FBQ04sV0FBSyxTQUFMLENBQWUsT0FBZjtBQUNBLFVBQUcsS0FBSyxTQUFMLENBQWUsT0FBZixHQUF1QixFQUExQixFQUE4QjtBQUM3QixZQUFLLFNBQUwsQ0FBZSxPQUFmLEdBQXVCLE1BQUksS0FBSyxTQUFMLENBQWUsT0FBZixDQUF1QixRQUF2QixFQUEzQjtBQUNBO0FBQ0QsV0FBSyxTQUFMLENBQWUsT0FBZixHQUF5QixFQUF6QjtBQUNBO0FBQ0QsS0FWRCxNQVVPO0FBQ04sVUFBSyxTQUFMLENBQWUsT0FBZjtBQUNBLFNBQUcsS0FBSyxTQUFMLENBQWUsT0FBZixHQUF1QixFQUExQixFQUE4QjtBQUM3QixXQUFLLFNBQUwsQ0FBZSxPQUFmLEdBQXVCLE1BQUksS0FBSyxTQUFMLENBQWUsT0FBZixDQUF1QixRQUF2QixFQUEzQjtBQUNBO0FBQ0Q7O0FBRUQsSUFwQmUsRUFvQmQsSUFwQmMsQ0FBaEI7QUFxQkE7QUFFRDtBQUNELENBN1FEIiwiZmlsZSI6ImFuZ3VsYXItcXVpei5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZShcImFuZ3VsYXItcXVpelwiLCBbJ25nTWF0ZXJpYWwnLCAnNzIwa2Iuc29jaWFsc2hhcmUnXSlcblx0LmNvbmZpZyhbJyRjb21waWxlUHJvdmlkZXInLCBmdW5jdGlvbiAoJGNvbXBpbGVQcm92aWRlcikge1xuXHRcdFx0JGNvbXBpbGVQcm92aWRlci5kZWJ1Z0luZm9FbmFibGVkKGZhbHNlKTtcblx0XHRcdHZhciBvbGRXYXJuID0gY29uc29sZS53YXJuO1xuXHRcdFx0Y29uc29sZS53YXJuID0gZnVuY3Rpb24oYXJnMSkge1xuXHRcdFx0XHRpZiAoYXJnMS5zdGFydHNXaXRoKCdBUklBOicpKSByZXR1cm47XG5cdFx0XHRcdGlmIChhcmcxLnN0YXJ0c1dpdGgoJ01hcmt1cCcpKSByZXR1cm47XG5cdFx0XHRcdG9sZFdhcm4uYXBwbHkoY29uc29sZSwgYXJndW1lbnRzKTtcblx0XHRcdH07XG5cdFx0XHRjb25zb2xlLndhcm4oJ1dhcm5pbmdzIGRpc2FibGVkLicpO1xuXHRcdH1dKSIsIihmdW5jdGlvbigpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGFuZ3VsYXJcclxuXHRcdC5tb2R1bGUoJ2F3ZW9zb21lLWFwcCcsWydhbmd1bGFyLXF1aXonXSlcclxuXHRcdC5jb25maWcoWyckY29tcGlsZVByb3ZpZGVyJywgZnVuY3Rpb24gKCRjb21waWxlUHJvdmlkZXIpIHtcclxuXHRcdFx0JGNvbXBpbGVQcm92aWRlci5kZWJ1Z0luZm9FbmFibGVkKGZhbHNlKTtcclxuXHRcdFx0dmFyIG9sZFdhcm4gPSBjb25zb2xlLndhcm47XHJcblx0XHRcdGNvbnNvbGUud2FybiA9IGZ1bmN0aW9uKGFyZzEpIHtcclxuXHRcdFx0XHRpZiAoYXJnMS5zdGFydHNXaXRoKCdBUklBOicpKSByZXR1cm47XHJcblx0XHRcdFx0aWYgKGFyZzEuc3RhcnRzV2l0aCgnTWFya3VwJykpIHJldHVybjtcclxuXHRcdFx0XHRvbGRXYXJuLmFwcGx5KGNvbnNvbGUsIGFyZ3VtZW50cyk7XHJcblx0XHRcdH07XHJcblx0XHRcdGNvbnNvbGUud2FybignV2FybmluZ3MgZGlzYWJsZWQuJyk7XHJcblx0XHR9XSlcclxuXHRcdC5jb250cm9sbGVyKCdTdGFydENvbnRyb2xsZXInLCBTdGFydENvbnRyb2xsZXIpO1xyXG5cclxuXHRTdGFydENvbnRyb2xsZXIuJGluamVjdCA9IFtcIiRodHRwXCIsXCIkY29tcGlsZVwiLFwiJHNjb3BlXCJdO1xyXG5cclxuXHQvKiBAbmdJbmplY3QgKi9cclxuXHRmdW5jdGlvbiBTdGFydENvbnRyb2xsZXIoJGh0dHAsJGNvbXBpbGUsJHNjb3BlKSB7XHJcblx0XHRsZXQgc2VsZiA9IHRoaXM7XHJcblxyXG5cclxuXHRcdCRodHRwLmdldChcIi9qcy9kYXRhLmpzb25cIikudGhlbihzdWNjZXNzQ2FsbGJhY2ssZXJyUHJvbWlzZSk7XHJcblxyXG5cclxuXHRcdGZ1bmN0aW9uIHN1Y2Nlc3NDYWxsYmFjayhyZXNwb25jZSkge1xyXG5cdFx0XHRzZWxmLnF1aXogPSByZXNwb25jZS5kYXRhO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGVyclByb21pc2UoZXJyKSB7XHJcblx0XHRcdGNvbnNvbGUubG9nKGVycik7XHJcblx0XHR9XHJcbiBcdH1cclxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKCdhbmd1bGFyLXF1aXonKVxyXG5cdFx0LmRpcmVjdGl2ZSgnYW5ndWxhclF1aXonLCBRdWl6RW5naW5lKTtcclxuXHJcblx0UXVpekVuZ2luZS4kaW5qZWN0ID0gWyckaW50ZXJ2YWwnLCckdGltZW91dCddO1xyXG5cclxuXHQvKiBAbmdJbmplY3QgKi9cclxuXHRmdW5jdGlvbiBRdWl6RW5naW5lKCkge1xyXG5cdFx0dmFyIGRpcmVjdGl2ZSA9IHtcclxuXHRcdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZSxcclxuXHRcdFx0Y29udHJvbGxlcjogUXVpekVuZ2luZUNvbnRyb2xsZXIsXHJcblx0XHRcdGNvbnRyb2xsZXJBczogJ3F1aXpFbmdpbmVDdHJsJyxcclxuXHRcdFx0bGluazogbGluayxcclxuXHRcdFx0cmVzdHJpY3Q6ICdBRScsXHJcblx0XHRcdHRlbXBsYXRlVXJsOiBcIi92aWV3cy9xdWl6Lmh0bWxcIixcclxuXHRcdFx0c2NvcGU6IHtcclxuXHRcdFx0XHRxdWl6RGF0YSA6IFwiPVwiXHJcblx0XHRcdH1cclxuXHRcdH07XHJcblx0XHRyZXR1cm4gZGlyZWN0aXZlO1xyXG5cclxuXHRcdGZ1bmN0aW9uIGxpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvKiBAbmdJbmplY3QgKi9cclxuXHRmdW5jdGlvbiBRdWl6RW5naW5lQ29udHJvbGxlcigkaW50ZXJ2YWwsJHRpbWVvdXQpIHtcclxuXHRcdHZhciBzZWxmID0gdGhpcztcclxuXHRcdHNlbGYuc2hvd1F1aXpIYW5kbGVyID0gc2hvd1F1aXpIYW5kbGVyO1xyXG5cdFx0c2VsZi5zaG93VHlwZU5hbWVWaWV3ID0gc2VsZi5xdWl6RGF0YS50eXBlTmFtZTtcclxuXHRcdHNlbGYubWF4Q291bnRPZlF1ZXN0aW9ucyA9IDE1O1xyXG5cdFx0c2VsZi5hbnN3ZXJzTGlzdCA9IFtdO1xyXG5cdFx0c2VsZi5ub3RTZWxlY3RlZCA9IHRydWU7XHJcblx0XHRzZWxmLmN1c3RvbWVyQW5zd2VycyA9IG51bGw7XHJcblx0XHRzZWxmLmNob2lzZSA9IHVuZGVmaW5lZDtcclxuXHRcdHNlbGYuaXNGdWxsQ3VzdG9tZXJBbnN3ZXJzQXJyID0gZmFsc2U7XHJcblx0XHRzZWxmLnNob3dSZXN1bHRzID0gZmFsc2U7XHJcblx0XHRzZWxmLnJlc3VsdHMgPSB7fTtcclxuXHRcdHNlbGYucXVpelRpbWVyID0gbnVsbDtcclxuXHRcdHNlbGYuY3VycmVudFF1ZXN0aW9uTnVtYmVyID0gMDtcclxuXHRcdHNlbGYuc3RvcFRpbWUgPSB1bmRlZmluZWQ7XHJcblxyXG5cdFx0c2VsZi5tYWtlQ2hvaWNlSGFuZGxlciA9IG1ha2VDaG9pY2VIYW5kbGVyO1xyXG5cdFx0c2VsZi5za2lwUXVlc3Rpb25IYW5kbGVyID0gc2tpcFF1ZXN0aW9uSGFuZGxlcjtcclxuXHRcdHNlbGYuYW5zd2VySGFuZGxlciA9IGFuc3dlckhhbmRsZXI7XHJcblx0XHRzZWxmLnJlcGxheVRlc3RIYW5kbGVyID0gcmVwbGF5VGVzdEhhbmRsZXI7XHJcblx0XHRzZWxmLmZpbmlzaFRlc3RIYW5kbGVyID0gZmluaXNoVGVzdEhhbmRsZXI7XHJcblxyXG5cdFx0c2VsZi5vcGVuUXVpekl0ZW0gPSBvcGVuUXVpekl0ZW07XHJcblxyXG5cclxuXHJcblx0XHRpZighc2VsZi5zaG93VHlwZU5hbWVWaWV3KSB7XHJcblx0XHRcdHNlbGYuc2hvd1F1aXpIYW5kbGVyKCk7XHJcblx0XHRcdC8vc3RhcnRUaW1lcigpO1xyXG5cdFx0fVxyXG5cdFx0aW5pdFF1aXooKTtcclxuXHJcblx0XHQvLyBCdXNpbmVzcyBsb2dpY1xyXG5cdFx0ZnVuY3Rpb24gaW5pdFF1aXooKSB7XHJcblx0XHRcdHZhciB0bXBMZW5ndGggPSBzZWxmLnF1aXpEYXRhLnF1aXoubGVuZ3RoO1xyXG5cclxuXHRcdFx0aWYgKHRtcExlbmd0aCA+IHNlbGYubWF4Q291bnRPZlF1ZXN0aW9ucykge1xyXG5cdFx0XHRcdHNlbGYucXVpekRhdGEucXVpei5sZW5ndGggPSBzZWxmLm1heENvdW50T2ZRdWVzdGlvbnM7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHNlbGYuY3VzdG9tZXJBbnN3ZXJzID0gbmV3IEFycmF5KHNlbGYucXVpekRhdGEucXVpei5sZW5ndGgpO1xyXG5cclxuXHRcdFx0Zm9yKGxldCBpID0gMCA7IGk8c2VsZi5jdXN0b21lckFuc3dlcnMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0XHRzZWxmLmN1c3RvbWVyQW5zd2Vyc1tpXT11bmRlZmluZWQ7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGNvbnNvbGUubG9nKHNlbGYuY3VzdG9tZXJBbnN3ZXJzKTtcclxuXHJcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5xdWl6RGF0YS5xdWl6Lmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0c2VsZi5hbnN3ZXJzTGlzdC5wdXNoKHtcclxuXHRcdFx0XHRcdG5hbWU6IFwiXCIgKyAoaSArIDEpICsgXCIuIFwiICsgc2VsZi5xdWl6RGF0YS5xdWl6W2ldW1wib3B0aW9uc1wiXVtzZWxmLnF1aXpEYXRhLnF1aXpbaV1bXCJhbnN3ZXJcIl1dLFxyXG5cdFx0XHRcdFx0cmlnaHRBbnN3ZXI6IHBhcnNlSW50KHNlbGYucXVpekRhdGEucXVpeltpXS5hbnN3ZXIpXHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGNvbnNvbGUuZGVidWcoc2VsZi5hbnN3ZXJzTGlzdCk7XHJcblxyXG5cdFx0XHRzZWxmLmN1cnJlbnRRdWl6SXRlbSA9IHNlbGYucXVpekRhdGEucXVpelswXTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBzaG93UXVpekhhbmRsZXIoKSB7XHJcblx0XHRcdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0ZXN0LWNvbnRhaW5lcicpLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XHJcblx0XHRcdHNlbGYuc2hvd1R5cGVOYW1lVmlldyA9IGZhbHNlO1xyXG5cdFx0XHRzZWxmLnN0YXJ0VGVzdE1vZGUgPSB0cnVlO1xyXG5cdFx0XHRzdGFydFRpbWVyKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gbWFrZUNob2ljZUhhbmRsZXIoaW5kZXgpIHtcclxuXHRcdFx0c2VsZi5ub3RTZWxlY3RlZCA9IGZhbHNlO1xyXG5cdFx0XHRzZWxmLmNob2lzZSA9IGluZGV4O1xyXG5cdFx0fTtcclxuXHJcblx0XHRmdW5jdGlvbiBhbnN3ZXJIYW5kbGVyKCkge1xyXG5cdFx0XHRpZiAoIXNlbGYubm90U2VsZWN0ZWQpIHtcclxuXHRcdFx0XHRuZXh0UXVlc3Rpb24oKTtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHJcblx0XHRmdW5jdGlvbiBza2lwUXVlc3Rpb25IYW5kbGVyKCkge1xyXG5cdFx0XHRuZXh0UXVlc3Rpb24oKTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiByZXBsYXlUZXN0SGFuZGxlcigpIHtcclxuXHRcdFx0c2VsZi5zdGFydFRlc3RNb2RlID0gZmFsc2U7XHJcblx0XHRcdHNlbGYuc2hvd1Jlc3VsdHMgPSBmYWxzZTtcclxuXHRcdFx0c2VsZi5pc0Z1bGxDdXN0b21lckFuc3dlcnNBcnIgPSBmYWxzZTtcclxuXHRcdFx0c2VsZi5jdXN0b21lckFuc3dlcnMgPSBudWxsO1xyXG5cdFx0XHRzZWxmLnVzZXJOYW1lID0gXCJcIjtcclxuXHRcdFx0c2VsZi5hbnN3ZXJzTGlzdC5sZW5ndGggPSAwO1xyXG5cdFx0XHRpZihzZWxmLnF1aXpEYXRhLmhhc093blByb3BlcnR5KFwidGltZXJcIikpIHtcclxuXHRcdFx0XHQkaW50ZXJ2YWwuY2FuY2VsKHNlbGYuc3RvcFRpbWUpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmKCFzZWxmLnF1aXpEYXRhLnR5cGVOYW1lKSB7XHJcblx0XHRcdFx0c2VsZi5zdGFydFRlc3RNb2RlID0gdHJ1ZTtcclxuXHRcdFx0XHRzZWxmLnNob3dRdWl6SGFuZGxlcigpO1xyXG5cdFx0XHRcdGluaXRRdWl6KCk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0c2VsZi5zaG93VHlwZU5hbWVWaWV3ID0gdHJ1ZTtcclxuXHRcdFx0XHRzZWxmLnN0YXJ0VGVzdE1vZGUgPSBmYWxzZTtcclxuXHRcdFx0XHRjb25zb2xlLmRlYnVnKHNlbGYuc3RhcnRUZXN0TW9kZSk7XHJcblx0XHRcdFx0Y29uc29sZS5kZWJ1ZyhzZWxmLnNob3dUeXBlTmFtZVZpZXcpO1xyXG5cdFx0XHRcdGluaXRRdWl6KCk7XHJcblx0XHRcdH1cclxuXHRcdFx0c2VsZi5jaG9pc2UgPSB1bmRlZmluZWQ7XHJcblx0XHRcdHNlbGYuY3VycmVudFF1aXpJdGVtID0gc2VsZi5xdWl6RGF0YS5xdWl6WzBdO1xyXG5cdFx0XHRzZWxmLmN1cnJlbnRRdWVzdGlvbk51bWJlciA9IDA7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gZmluaXNoVGVzdEhhbmRsZXIoKSB7XHJcblx0XHRcdHZhciBpO1xyXG5cdFx0XHRzZWxmLnJlc3VsdHMgPSB7XHJcblx0XHRcdFx0Y29ycmVjdDogMCxcclxuXHRcdFx0XHRtaXN0YWtlOiAwLFxyXG5cdFx0XHRcdHVuYW5zd2VyZWQ6IDBcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYoc2VsZi5xdWl6RGF0YS5oYXNPd25Qcm9wZXJ0eShcInRpbWVyXCIpKSB7XHJcblx0XHRcdFx0JGludGVydmFsLmNhbmNlbChzZWxmLnN0b3BUaW1lKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Zm9yIChpID0gMDsgaSA8IHNlbGYuY3VzdG9tZXJBbnN3ZXJzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0aWYgKHNlbGYuY3VzdG9tZXJBbnN3ZXJzW2ldID09PSBwYXJzZUludChzZWxmLnF1aXpEYXRhLnF1aXpbaV0uYW5zd2VyKSkge1xyXG5cdFx0XHRcdFx0c2VsZi5yZXN1bHRzLmNvcnJlY3QrKztcclxuXHRcdFx0XHR9IGVsc2UgaWYgKHNlbGYuY3VzdG9tZXJBbnN3ZXJzW2ldICE9PSAgcGFyc2VJbnQoc2VsZi5xdWl6RGF0YS5xdWl6W2ldLmFuc3dlcikgJiYgc2VsZi5jdXN0b21lckFuc3dlcnNbaV0gIT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRcdFx0c2VsZi5yZXN1bHRzLm1pc3Rha2UrKztcclxuXHRcdFx0XHR9IGVsc2UgaWYgKHNlbGYuY3VzdG9tZXJBbnN3ZXJzW2ldID09PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0XHRcdHNlbGYucmVzdWx0cy51bmFuc3dlcmVkKys7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRzZWxmLnJlc3VsdHMuY29ycmVjdCA9IChzZWxmLnJlc3VsdHMuY29ycmVjdCAqIDEwMCAvIHNlbGYucXVpekRhdGEucXVpei5sZW5ndGgpO1xyXG5cdFx0XHRzZWxmLnJlc3VsdHMubWlzdGFrZSA9IChzZWxmLnJlc3VsdHMubWlzdGFrZSAqIDEwMCAvIHNlbGYucXVpekRhdGEucXVpei5sZW5ndGgpO1xyXG5cdFx0XHRzZWxmLnJlc3VsdHMudW5hbnN3ZXJlZCA9IChzZWxmLnJlc3VsdHMudW5hbnN3ZXJlZCAqIDEwMCAvIHNlbGYucXVpekRhdGEucXVpei5sZW5ndGgpO1xyXG5cclxuXHRcdFx0aWYgKHNlbGYudXNlck5hbWUgPT09IFwiXCIgfHwgc2VsZi51c2VyTmFtZSA9PT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdFx0c2VsZi51c2VyTmFtZSA9IFwiTm8gbmFtZVwiXHJcblx0XHRcdH1cclxuXHRcdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc3VsdHMtdmlldycpLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XHJcblx0XHRcdHNlbGYuc3RhcnRUZXN0TW9kZSA9IGZhbHNlO1xyXG5cdFx0XHRzZWxmLnNob3dSZXN1bHRzID0gdHJ1ZTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBjaGVja0Z1bGxBbnN3ZXJzQXJyYXkoKSB7XHJcblxyXG5cdFx0XHRzZWxmLmlzRnVsbEN1c3RvbWVyQW5zd2Vyc0FyciA9IHNlbGYuY3VzdG9tZXJBbnN3ZXJzLmV2ZXJ5KGZ1bmN0aW9uKGVsZW1lbnQsIGluZGV4LCBhcnJheSl7XHJcblx0XHRcdFx0cmV0dXJuIGVsZW1lbnQgIT09IHVuZGVmaW5lZDtcclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0XHRjb25zb2xlLmxvZyhzZWxmLmN1c3RvbWVyQW5zd2Vycyk7XHJcblxyXG5cdFx0XHRpZiAoc2VsZi5pc0Z1bGxDdXN0b21lckFuc3dlcnNBcnIpIHtcclxuXHRcdFx0XHRmaW5pc2hUZXN0SGFuZGxlcigpO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHRcdGZ1bmN0aW9uIG5leHRRdWVzdGlvbigpIHtcclxuXHRcdFx0dmFyIGksXHJcblx0XHRcdFx0aW5kZXggPSBzZWxmLmN1cnJlbnRRdWVzdGlvbk51bWJlcisxO1xyXG5cdFx0XHRpZiAoaW5kZXggPT09IHNlbGYucXVpekRhdGEucXVpei5sZW5ndGgpIHtcclxuXHRcdFx0XHRpbmRleCA9IDA7XHJcblx0XHRcdH1cclxuXHRcdFx0Zm9yIChpID0gaW5kZXg7IGkgPCBzZWxmLnF1aXpEYXRhLnF1aXoubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0XHRpZiAoc2VsZi5jdXN0b21lckFuc3dlcnNbaV0gPT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdFx0XHRpbmRleCA9IGk7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmIChpPT1zZWxmLnF1aXpEYXRhLnF1aXoubGVuZ3RoKSB7XHJcblx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IGluZGV4OyBpKyspIHtcclxuXHRcdFx0XHRcdGlmIChzZWxmLmN1c3RvbWVyQW5zd2Vyc1tpXSA9PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0XHRcdFx0aW5kZXggPSBpO1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0b3BlblF1aXpJdGVtKGluZGV4KTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBvcGVuUXVpekl0ZW0oaW5kZXgpIHtcclxuXHRcdFx0aWYgKCFzZWxmLmlzRnVsbEN1c3RvbWVyQW5zd2Vyc0Fycikge1xyXG5cdFx0XHRcdHNlbGYuY3VzdG9tZXJBbnN3ZXJzW3NlbGYuY3VycmVudFF1ZXN0aW9uTnVtYmVyXSA9IHNlbGYuY2hvaXNlO1xyXG5cdFx0XHRcdHNlbGYuY2hvaXNlID0gdW5kZWZpbmVkO1xyXG5cdFx0XHRcdHNlbGYubm90U2VsZWN0ZWQgPSB0cnVlO1xyXG5cdFx0XHRcdHNlbGYuY3VycmVudFF1aXpJdGVtID0gc2VsZi5xdWl6RGF0YS5xdWl6W2luZGV4XTtcclxuXHRcdFx0XHQkdGltZW91dChmdW5jdGlvbigpe1xyXG5cdFx0XHRcdH0sNTAwMCk7XHJcblx0XHRcdFx0aWYgKHNlbGYuY3VzdG9tZXJBbnN3ZXJzW2luZGV4XSAhPT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdFx0XHRjb25zb2xlLmRlYnVnKFwiSGFzIGFuc3dlclwiKVxyXG5cdFx0XHRcdFx0c2VsZi5ub3RTZWxlY3RlZCA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0c2VsZi5jaG9pc2UgPSBzZWxmLmN1c3RvbWVyQW5zd2Vyc1tpbmRleF07XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHNlbGYuY3VycmVudFF1ZXN0aW9uTnVtYmVyID0gaW5kZXg7XHJcblxyXG5cdFx0XHRjaGVja0Z1bGxBbnN3ZXJzQXJyYXkoKTtcclxuXHRcdH07XHJcblxyXG5cdFx0ZnVuY3Rpb24gc3RhcnRUaW1lcigpIHtcclxuXHRcdFx0c2VsZi5xdWl6VGltZXIgPSB7fTtcclxuXHRcdFx0aWYoc2VsZi5xdWl6RGF0YS5oYXNPd25Qcm9wZXJ0eShcInRpbWVyXCIpKSB7XHJcblx0XHRcdFx0aWYoc2VsZi5xdWl6RGF0YS50aW1lci5taW51dGVzPDEwKSB7XHJcblx0XHRcdFx0XHRzZWxmLnF1aXpUaW1lci5taW51dGVzID0gXCIwXCIrc2VsZi5xdWl6RGF0YS50aW1lci5taW51dGVzLnRvU3RyaW5nKCk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHNlbGYucXVpelRpbWVyLm1pbnV0ZXMgPSBzZWxmLnF1aXpEYXRhLnRpbWVyLm1pbnV0ZXMudG9TdHJpbmcoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYoc2VsZi5xdWl6RGF0YS50aW1lci5zZWNvbmRzPDEwKSB7XHJcblx0XHRcdFx0XHRzZWxmLnF1aXpUaW1lci5zZWNvbmRzID0gXCIwXCIrc2VsZi5xdWl6RGF0YS50aW1lci5zZWNvbmRzLnRvU3RyaW5nKCk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHNlbGYucXVpelRpbWVyLnNlY29uZHMgPSBzZWxmLnF1aXpEYXRhLnRpbWVyLnNlY29uZHMudG9TdHJpbmcoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aW5pdFRpbWVyKCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBpbml0VGltZXIoKSB7XHJcblx0XHRcdHNlbGYuc3RvcFRpbWUgPSAkaW50ZXJ2YWwoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0c2VsZi5xdWl6VGltZXIuc2Vjb25kcyA9IHBhcnNlSW50KHNlbGYucXVpelRpbWVyLnNlY29uZHMpO1xyXG5cdFx0XHRcdHNlbGYucXVpelRpbWVyLm1pbnV0ZXMgPSBwYXJzZUludChzZWxmLnF1aXpUaW1lci5taW51dGVzKTtcclxuXHRcdFx0XHRpZihzZWxmLnF1aXpUaW1lci5zZWNvbmRzPT0wKSB7XHJcblx0XHRcdFx0XHRpZihzZWxmLnF1aXpUaW1lci5taW51dGVzPT0wKSB7XHJcblx0XHRcdFx0XHRcdGZpbmlzaFRlc3RIYW5kbGVyKCk7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRzZWxmLnF1aXpUaW1lci5taW51dGVzLS07XHJcblx0XHRcdFx0XHRcdGlmKHNlbGYucXVpelRpbWVyLm1pbnV0ZXM8MTApIHtcclxuXHRcdFx0XHRcdFx0XHRzZWxmLnF1aXpUaW1lci5taW51dGVzPVwiMFwiK3NlbGYucXVpelRpbWVyLm1pbnV0ZXMudG9TdHJpbmcoKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRzZWxmLnF1aXpUaW1lci5zZWNvbmRzID0gNTk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHNlbGYucXVpelRpbWVyLnNlY29uZHMtLTtcclxuXHRcdFx0XHRcdGlmKHNlbGYucXVpelRpbWVyLnNlY29uZHM8MTApIHtcclxuXHRcdFx0XHRcdFx0c2VsZi5xdWl6VGltZXIuc2Vjb25kcz1cIjBcIitzZWxmLnF1aXpUaW1lci5zZWNvbmRzLnRvU3RyaW5nKCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdC8vY29uc29sZS5kZWJ1ZyhzZWxmLnF1aXpUaW1lcik7XHJcblx0XHRcdH0sMTAwMCk7XHJcblx0XHR9XHJcblxyXG5cdH1cclxufSkoKTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
